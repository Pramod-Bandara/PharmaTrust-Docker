name: PharmaTrust Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pharmatrust

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Services
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "JWT_SECRET=test-secret-key" >> .env
        
    - name: Build all services
      run: |
        docker-compose build --parallel
        
    - name: Start services
      run: |
        docker-compose up -d
        
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to start..."
        sleep 60
        
    - name: Check service health
      run: |
        docker-compose ps
        
        # Check if all services are running
        if [ $(docker-compose ps --services --filter "status=running" | wc -l) -eq 7 ]; then
          echo "✅ All services are running"
        else
          echo "❌ Some services failed to start"
          docker-compose logs
          exit 1
        fi
        
    - name: Run integration tests
      run: |
        # Wait a bit more for services to be fully ready
        sleep 30
        
        # Test service endpoints
        curl -f http://localhost:80 || exit 1
        curl -f http://localhost:4001/health || exit 1
        curl -f http://localhost:4002/health || exit 1
        curl -f http://localhost:4003/health || exit 1
        curl -f http://localhost:4004/health || exit 1
        curl -f http://localhost:4010/health || exit 1
        
        echo "✅ All health checks passed"
        
    - name: Run demo data seeding test
      run: |
        # Install Node.js for running scripts
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install dependencies and run setup
        cd scripts
        npm install
        npm run setup
        
    - name: Stop services
      if: always()
      run: |
        docker-compose down -v
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [web, auth, medicine, iot, blockchain, mobile-gateway, nginx]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'nginx' && './gateway' || matrix.service == 'web' && './web' || format('./services/{0}', matrix.service) }}
        file: ${{ matrix.service == 'nginx' && './gateway/Dockerfile' || matrix.service == 'web' && './web/Dockerfile' || format('./services/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create production docker-compose
      run: |
        # Create production docker-compose that uses built images
        cat > docker-compose.prod.yml << EOF
        version: '3.9'
        
        services:
          mongo:
            image: mongo:7
            container_name: pharmatrust-mongo
            restart: unless-stopped
            volumes:
              - mongo-data:/data/db
            environment:
              - MONGO_INITDB_DATABASE=pharmatrust
            healthcheck:
              test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/pharmatrust --quiet
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            networks:
              - pharmanet
        
          redis:
            image: redis:7-alpine
            container_name: pharmatrust-redis
            restart: unless-stopped
            command: redis-server --appendonly yes
            volumes:
              - redis-data:/data
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 30s
            networks:
              - pharmanet
        
          auth:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/auth:latest
            container_name: pharmatrust-auth
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - PORT=4001
              - MONGO_URL=mongodb://mongo:27017/pharmatrust
              - REDIS_URL=redis://redis:6379
              - JWT_SECRET=\${JWT_SECRET}
            depends_on:
              mongo:
                condition: service_healthy
              redis:
                condition: service_healthy
            networks:
              - pharmanet
        
          medicine:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/medicine:latest
            container_name: pharmatrust-medicine
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - PORT=4002
              - MONGO_URL=mongodb://mongo:27017/pharmatrust
              - REDIS_URL=redis://redis:6379
              - JWT_SECRET=\${JWT_SECRET}
            depends_on:
              mongo:
                condition: service_healthy
              redis:
                condition: service_healthy
            networks:
              - pharmanet
        
          iot:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/iot:latest
            container_name: pharmatrust-iot
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - PORT=4003
              - MONGO_URL=mongodb://mongo:27017/pharmatrust
              - REDIS_URL=redis://redis:6379
              - JWT_SECRET=\${JWT_SECRET}
              - WEBSOCKET_PORT=4003
            depends_on:
              mongo:
                condition: service_healthy
              redis:
                condition: service_healthy
            networks:
              - pharmanet
        
          blockchain:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/blockchain:latest
            container_name: pharmatrust-blockchain
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - PORT=4004
              - THIRDWEB_SECRET_KEY=\${THIRDWEB_SECRET_KEY:-}
              - CONTRACT_ADDRESS=\${CONTRACT_ADDRESS:-}
              - JWT_SECRET=\${JWT_SECRET}
              - BLOCKCHAIN_NETWORK=\${BLOCKCHAIN_NETWORK:-polygon-mumbai}
            networks:
              - pharmanet
        
          mobile-gateway:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/mobile-gateway:latest
            container_name: pharmatrust-mobile-gateway
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - PORT=4010
              - REDIS_URL=redis://redis:6379
              - AUTH_BASE=http://auth:4001
              - MEDICINE_BASE=http://medicine:4002
              - IOT_BASE=http://iot:4003
              - BLOCKCHAIN_BASE=http://blockchain:4004
              - JWT_SECRET=\${JWT_SECRET}
            depends_on:
              auth:
                condition: service_healthy
              medicine:
                condition: service_healthy
              iot:
                condition: service_healthy
              blockchain:
                condition: service_healthy
              redis:
                condition: service_healthy
            networks:
              - pharmanet
        
          web:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/web:latest
            container_name: pharmatrust-web
            restart: unless-stopped
            environment:
              - NODE_ENV=production
              - PORT=3000
              - NEXT_TELEMETRY_DISABLED=1
              - NEXT_PUBLIC_API_URL=http://localhost:80
              - NEXT_PUBLIC_WS_URL=ws://localhost:4003
            depends_on:
              auth:
                condition: service_healthy
              medicine:
                condition: service_healthy
              iot:
                condition: service_healthy
              blockchain:
                condition: service_healthy
              mobile-gateway:
                condition: service_healthy
            networks:
              - pharmanet
        
          nginx:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/nginx:latest
            container_name: pharmatrust-nginx
            restart: unless-stopped
            ports:
              - "80:80"
              - "443:443"
            depends_on:
              web:
                condition: service_healthy
              auth:
                condition: service_healthy
              medicine:
                condition: service_healthy
              iot:
                condition: service_healthy
              blockchain:
                condition: service_healthy
              mobile-gateway:
                condition: service_healthy
            networks:
              - pharmanet
        
        volumes:
          mongo-data:
            driver: local
          redis-data:
            driver: local
        
        networks:
          pharmanet:
            driver: bridge
            ipam:
              config:
                - subnet: 172.20.0.0/16
        EOF
        
    - name: Upload production compose file
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-production
        path: docker-compose.prod.yml
